services:
  eureka-server:
    build: ./eureka-server
    ports:
      - "${EUREKA_PORT}:${EUREKA_PORT}"
    networks:
      - resource_platform_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:${EUREKA_PORT}/actuator/health"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  api-gateway:
    build: ./api-gateway
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
    networks:
      - resource_platform_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_GATEWAY_PORT}/actuator/health" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  resource-db:
    image: postgres:17
    container_name: resource-db
    environment:
      POSTGRES_DB: ${POSTGRES_RESOURCE_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_RESOURCE_PORT}
    networks:
      - resource_platform_network
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  song-db:
    image: postgres:17
    container_name: song-db
    environment:
      POSTGRES_DB: ${POSTGRES_SONG_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_SONG_PORT}
    networks:
      - resource_platform_network
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}


  resourceservice:
    build: ./resourceservice
    container_name: resource-service
    ports:
      - "${RESOURCE_PORT}:${RESOURCE_PORT}"
    depends_on:
      resource-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      localstack:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      CLOUD_AWS_REGION_STATIC: ${S3_REGION}
      CLOUD_AWS_S3_BUCKET_NAME: ${S3_RESOURCE_BUCKET_NAME}
      CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${S3_KEY}
      CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${S3_SECRET}
      CLOUD_AWS_S3_ENDPOINT: ${S3_URI}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    networks:
      - resource_platform_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${RESOURCE_PORT}/actuator/health" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  songservice:
    build: ./songservice
    ports:
      - "${SONG_PORT}-8083:${SONG_PORT}"
    depends_on:
      song-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
    networks:
      - resource_platform_network
    deploy:
      replicas: 2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SONG_PORT}/actuator/health" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  localstack:
    image: localstack/localstack:s3-latest
    ports:
      - "${LOCALSTACK_PORT}:${LOCALSTACK_PORT}"
    environment:
      - DEBUG=1
    volumes:
      - "./init-scripts/localstack/init-s3.py:/etc/localstack/init/ready.d/init-s3.py"
      - "./.env:/etc/localstack/init/ready.d/.env"
    networks:
      - resource_platform_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localstack:${LOCALSTACK_PORT}/_localstack/health" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  resource-processor:
    build: ./resource-processor
    container_name: resource-processor
    depends_on:
      localstack:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      RESOURCE_SERVICE_URL: ${RESOURCE_SERVICE_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
    networks:
      - resource_platform_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    networks:
      - resource_platform_network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

networks:
  resource_platform_network:
    driver: bridge