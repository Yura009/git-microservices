services:
  eureka-server:
    build: ./eureka-server
    ports:
      - "8761:8761"
    networks:
      - resource_platform_network

  resource-db:
    image: postgres:17
    container_name: resource-db
    environment:
      POSTGRES_DB: ${POSTGRES_RESOURCE_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_RESOURCE_PORT}
    networks:
      - resource_platform_network
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d

  song-db:
    image: postgres:17
    container_name: song-db
    environment:
      POSTGRES_DB: ${POSTGRES_SONG_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_SONG_PORT}
    networks:
      - resource_platform_network
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d


  resourceservice:
    build: ./resourceservice
    container_name: resource-service
    ports:
      - "8081:8081"
    depends_on:
      - resource-db
      - eureka-server
    environment:
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      CLOUD_AWS_REGION_STATIC: ${CLOUD_AWS_REGION_STATIC}
      CLOUD_AWS_S3_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${MINIO_ROOT_USER}
      CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      CLOUD_AWS_S3_ENDPOINT: http://minio:${MINIO_PORT}
    networks:
      - resource_platform_network

  songservice:
    build: ./songservice
    ports:
      - "8082-8083:8082"
    depends_on:
      - song-db
      - eureka-server
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
    networks:
      - resource_platform_network
    deploy:
      replicas: 2

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    command: server --console-address ":9001" /data

  resourceprocessor:
    build: ./resource-processor
    container_name: resource-processor
    depends_on:
      - minio
      - eureka-server
    environment:
      CLOUD_AWS_REGION_STATIC: ${CLOUD_AWS_REGION_STATIC}
      CLOUD_AWS_S3_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${MINIO_ROOT_USER}
      CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      CLOUD_AWS_S3_ENDPOINT: http://minio:${MINIO_PORT}
    networks:
      - resource_platform_network

volumes:
  minio-data:

networks:
  resource_platform_network:
    driver: bridge